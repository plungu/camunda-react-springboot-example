version: "3.3"

services:

########################################
# Camunda Service
########################################
  camunda-node-1:
    build:
      context: ../
    links:
      - db
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: jdbc:postgresql://db:5432/camunda?user=camunda&password=camunda&characterEncoding=UTF-8&reWriteBatchedInserts=true
      DATABASE_DRIVER: org.postgresql.Driver
      SERVER_PORT: 8080
      MAX_POOL_SIZE: 3
      RABBITMQ_HOST: rabbitmq-mgmt
      ADMIN_CLIENT_URL: http://camunda-node-1:8080
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1000M
        reservations:
          cpus: '2'
          memory: 1000M

########################################
# Postgres Service
#
# Be sure to add the config to application.yml
# and driver to pom.xml
#spring.datasource:
#  url: jdbc:postgresql://127.0.0.1:5432/camunda?&characterEncoding=UTF-8
#  username: camunda
#  password: camunda
#  driverClassName: org.postgresql.Driver
#  maxActive: 10
#  maxIdle: 5
#  minIdle: 2
#  initialSize: 5
#  removeAbandoned: true
########################################
  db:
    image: library/postgres:12.2
    restart: always
    environment:
      POSTGRES_USER: camunda
      POSTGRES_PASSWORD: camunda
      POSTGRES_DB: camunda
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          cpus: '3'
          memory: 5000M
        reservations:
          cpus: '3'
          memory: 2000M

#########################################
# Camunda Optimize
#########################################
  optimize:
    image: registry.camunda.cloud/optimize-ee/optimize:3.1.0
    environment:
      OPTIMIZE_CAMUNDABPM_REST_URL: http://camunda-node-1:8080/engine-rest
      OPTIMIZE_CAMUNDABPM_WEBAPPS_URL: http://camunda-node-1:8080/camunda
      OPTIMIZE_ELASTICSEARCH_HOST: optimize-elastic
      OPTIMIZE_ELASTICSEARCH_HTTP_PORT: 9200
    ports:
      - "8090:8090"


  optimize-elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    ports:
      - "9200:9200"
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1

#########################################
# Spring-Boot Admin Server
#########################################
#  spring-boot-admin:
#    image:


#########################################
# Kafaka Service
#########################################
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
#      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
#      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
#      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

#########################################
# Rabbit MQ Service
#########################################

#  rabbitmq-mgmt:
#    image: rabbitmq:3-management
#    hostname: rabbitmq-mgmt
#    ports:
#      - "9500:15672"
#      - "5672:5672"
#      - "4369:4369"
#      - "5671:5671"

#########################################
# LDAP Service
#########################################
# ou=people,ou=example,ou=com
#  ou=jane,ou=people,ou=example,ou=com (Password: jane)
#  ou=john,ou=people,ou=example,ou=com (Password: john)
#  ou=joe,ou=people,ou=example,ou=com (Password: joe)
#  ou=judy,ou=people,ou=example,ou=com (Password: judy)
# ou=groups,ou=example,ou=com
#  ou=camunda-users,ou=people,ou=example,ou=com
#  ou=all-users,ou=people,ou=example,ou=com
#
#########################################
#  apacheds:
#    image: kuchenmn/cam-apacheds
#    restart: always
#    environment:
#      USER: demo
#    ports:
#    - 10389:10389


##########################################
#      - Key Cloak Realted Services
##########################################
#  jboss.keycloak:
#    build: .
#    image: jboss/keycloak
#    image: gunnaraccso/keycloak.server:5.0.0
#    restart: always
#    environment:
#      TZ: Europe/Berlin
#      KEYCLOAK_USER: keycloak
#      KEYCLOAK_PASSWORD: keycloak1!
#    ports:
#      - "9001:8443"
#      - "9000:8080"

#  Create a service named db.
#  postgres:
#   Use the Docker Image postgres. This will pull the newest release.
#    image: "postgres"
#   Give the container the name my_postgres. You can changes to something else.
#    container_name: "postgres"
#   Setup the username, password, and database name. You can changes these values.
#    environment:
#      - POSTGRES_USER=keycloak
#      - POSTGRES_PASSWORD=password
#      - POSTGRES_DB=keycloak
#   Maps port 54320 (localhost) to port 5432 on the container. You can change the ports to fix your needs.
#    ports:
#      - "54320:5432"
#   Set a volume some that database is not lost after shutting down the container.
#   I used the name postgres-data but you can changed it to something else.
#    volumes:
