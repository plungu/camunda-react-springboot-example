{
	"info": {
		"_postman_id": "a40c6b4f-ec0f-498d-9dde-57b4926519b4",
		"name": "az-pm-order-PoC",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "start-process stock replenishment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"A valid response is reuturned\", () => {",
							"     pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});",
							"",
							"pm.test(\"Test if Payment Process Started and has ProcessId\", function () { ",
							"    ",
							"    var data = JSON.parse(responseBody);",
							"",
							"    console.log(` Response: Process Id =  ${data.id}` );",
							"",
							"",
							"    var jsonData = pm.response.json();",
							"    console.log(`Response: ${jsonData.id}`);",
							"    ",
							"    pm.response.to.have.jsonBody(\"id\"); ",
							"",
							"});",
							"",
							"pm.test(\"response body must have a businessKey\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"",
							"    var data = JSON.parse(responseBody);",
							"",
							"    //set the tasks into PM environment",
							"    pm.environment.set(\"businessKey\", data.businessKey);",
							"    console.log( \"businessKey: \"",
							"                        +pm.environment.get(\"businessKey\") );",
							"    pm.response.to.have.jsonBody(\"businessKey\"); ",
							"",
							"    ",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"businessKey\" : \"{{$guid}}\",\n\t\"variables\": {\n\t\t\"error\": \n\t\t{\n\t\t\t\"value\": false\n\t\t},\n        \"test\": \n\t\t{\n\t\t\t\"value\": false\n\t\t},\n\t\t\"approved\": \n\t\t{\n\t\t\t\"value\": true\n\t\t},\n\t\t\"employee\": \n\t\t{\n\t\t\t\"value\": \"{\\\"first\\\": \\\"Paul\\\",\\\"last\\\": \\\"Lungu\\\", \\\"email\\\": \\\"Paul.Lungu@camunda.com\\\",\\\"type\\\": \\\"PostalAddress\\\",\\\"addressLocality\\\": \\\"Denver\\\",\\\"addressRegion\\\": \\\"CO\\\",\\\"postalCode\\\":\\\"80209\\\",\\\"streetAddress\\\": \\\"7 S. Broadway\\\"}\",\n\t\t\t\"type\": \"Object\",\n\t\t\t\"valueInfo\": \n\t\t\t{\n\t\t\t\t\"objectTypeName\": \"com.camunda.poc.starter.entity.Employee\",\n\t\t\t\t\"serializationDataFormat\": \"application/json\"\n\t\t\t}\n\t    }\n\t}\n}\n"
				},
				"url": {
					"raw": "http://localhost:8080/engine-rest/process-definition/key/pm-stock-replenishment/start",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"engine-rest",
						"process-definition",
						"key",
						"pm-stock-replenishment",
						"start"
					]
				},
				"description": "Starts a process instance with the rest API"
			},
			"response": []
		},
		{
			"name": "message-corrolation-stock-inventory-confirmation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"messageName\" : \"third-party-inventory-request-confirmation\",\n  \"businessKey\" : \"{{businessKey}}\"\n}"
				},
				"url": {
					"raw": "http://localhost:8080/engine-rest/message",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"engine-rest",
						"message"
					]
				}
			},
			"response": []
		},
		{
			"name": "start-process notification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"A valid response is reuturned\", () => {",
							"     pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});",
							"",
							"pm.test(\"Test if Payment Process Started and has ProcessId\", function () { ",
							"    ",
							"    var data = JSON.parse(responseBody);",
							"",
							"    console.log(` Response: Process Id =  ${data.id}` );",
							"",
							"",
							"    var jsonData = pm.response.json();",
							"    console.log(`Response: ${jsonData.id}`);",
							"    ",
							"    pm.response.to.have.jsonBody(\"id\"); ",
							"",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"businessKey\" : \"{{$guid}}\",\n\t\"variables\": {\n\t\t\"error\": \n\t\t{\n\t\t\t\"value\": false\n\t\t},\n        \"test\": \n\t\t{\n\t\t\t\"value\": false\n\t\t},\n\t\t\"approved\": \n\t\t{\n\t\t\t\"value\": true\n\t\t},\n\t\t\"employee\": \n\t\t{\n\t\t\t\"value\": \"{\\\"first\\\": \\\"Paul\\\",\\\"last\\\": \\\"Lungu\\\", \\\"email\\\": \\\"Paul.Lungu@camunda.com\\\",\\\"type\\\": \\\"PostalAddress\\\",\\\"addressLocality\\\": \\\"Denver\\\",\\\"addressRegion\\\": \\\"CO\\\",\\\"postalCode\\\":\\\"80209\\\",\\\"streetAddress\\\": \\\"7 S. Broadway\\\"}\",\n\t\t\t\"type\": \"Object\",\n\t\t\t\"valueInfo\": \n\t\t\t{\n\t\t\t\t\"objectTypeName\": \"com.camunda.poc.starter.entity.Employee\",\n\t\t\t\t\"serializationDataFormat\": \"application/json\"\n\t\t\t}\n\t    }\n\t}\n}\n"
				},
				"url": {
					"raw": "http://localhost:8080/engine-rest/process-definition/key/pm-inventory-notification/start",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"engine-rest",
						"process-definition",
						"key",
						"pm-inventory-notification",
						"start"
					]
				}
			},
			"response": []
		},
		{
			"name": "get-process-definition",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"A credit-balance task is returned\", () => {",
							"     pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});",
							"",
							"var processName = \"PaymentProcess\";",
							"",
							"pm.test(\"Test if Payment Process exists\", function () { ",
							"    ",
							"    pm.expect(responseBody.has(processName)).to.equal(true); ",
							"    ",
							"    var data = JSON.parse(responseBody);",
							"",
							"    var reducedData = [];",
							"    data.forEach(function (obj, index){",
							"        ",
							"            if(obj.key.includes(processName)){",
							"                reducedData.push(obj);",
							"            } ",
							"        }",
							"    )",
							"    ",
							"    obj = reducedData.reduce(function (reducer, current){",
							"        console.log( current.version );",
							"        if (current.version > reducer.version)",
							"            return current;",
							"        else",
							"            return reducer;",
							"    })    ",
							"    ",
							"    pm.environment.set(\"key\", obj.key);",
							"    console.log( \"Process Key Set: \"",
							"        +pm.environment.get(\"key\") );",
							"",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/rest/process-definition",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"rest",
						"process-definition"
					]
				},
				"description": "Create process instances for demo"
			},
			"response": []
		},
		{
			"name": "Get taskS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"userTaskId\",jsonData[0].id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/engine-rest/task",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"engine-rest",
						"task"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get task by group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"userTaskId\",jsonData[0].id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/engine-rest/task?processInstanceBusinessKey=1dba86f6-1888-4d0e-9572-f2978e54d13e&assignee=paul",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"engine-rest",
						"task"
					],
					"query": [
						{
							"key": "processInstanceBusinessKey",
							"value": "1dba86f6-1888-4d0e-9572-f2978e54d13e"
						},
						{
							"key": "assignee",
							"value": "paul"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Complete task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"variables\": {\n        \"aStringVariable\": {\n            \"value\": \"aStringValue\"\n        }\n    },\n    \"withVariablesInReturn\": true\n}"
				},
				"url": {
					"raw": "http://localhost:8080/engine-rest/task/{{userTaskId}}/complete",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"engine-rest",
						"task",
						"{{userTaskId}}",
						"complete"
					]
				}
			},
			"response": []
		},
		{
			"name": "Claim task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"userId\": \"paul\"}\n"
				},
				"url": {
					"raw": "http://localhost:8080/engine-rest/task/{{userTaskId}}/claim",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"engine-rest",
						"task",
						"{{userTaskId}}",
						"claim"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Item To Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"A valid response is reuturned\", () => {",
							"     pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});",
							"",
							"pm.test(\"Test if Payment Process Started and has ProcessId\", function () { ",
							"    ",
							"    var data = JSON.parse(responseBody);",
							"",
							"    console.log(` Response: Process Id =  ${data.id}` );",
							"",
							"",
							"    var jsonData = pm.response.json();",
							"    console.log(`Response: ${jsonData.id}`);",
							"    ",
							"    pm.response.to.have.jsonBody(\"id\"); ",
							"",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/uri-list"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "http://localhost:8080/api/orderItems/1\nhttp://localhost:8080/api/orderItems/2\nhttp://localhost:8080/api/orderItems/3\nhttp://localhost:8080/api/orderItems/4"
				},
				"url": {
					"raw": "http://localhost:8080/api/orders/1/itemsOrdered",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"orders",
						"1",
						"itemsOrdered"
					]
				},
				"description": "Starts a process instance with the rest API"
			},
			"response": []
		},
		{
			"name": "Get Orders",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Stock Items",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"product\" : \"PM {{$guid}}'s\",\n    \"pmiCode\" : \"US\",\n    \"pmiDescription\" : \"some pm description\",\n    \"qrCode\" : \"{{$guid}}\",\n    \"quantity\" : \"100\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/stockItems",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"stockItems"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Stock Items",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/stockItems",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"stockItems"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Order Items",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"product\" : \"PM {{$guid}}'s\",\n    \"pmiCode\" : \"US\",\n    \"pmiDescription\" : \"some pm description\",\n    \"qrCode\" : \"{{$guid}}\",\n    \"quantity\" : \"100\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/orderItems",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"orderItems"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"A valid response is reuturned\", () => {",
							"     pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test(\"response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});",
							"",
							"pm.test(\"Test if Payment Process Started and has ProcessId\", function () { ",
							"    ",
							"    var data = JSON.parse(responseBody);",
							"",
							"    console.log(` Response: Process Id =  ${data.id}` );",
							"",
							"",
							"    var jsonData = pm.response.json();",
							"    console.log(`Response: ${jsonData.id}`);",
							"    ",
							"    pm.response.to.have.jsonBody(\"id\"); ",
							"",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"orderKey\" : \"{{$guid}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Item",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/pmItems/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"pmItems",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/pmOrders/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"pmOrders",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET items by order",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/orders/1/itemsOrdered",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"orders",
						"1",
						"itemsOrdered"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Contacts",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/contacts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Contact",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first\" : \"Paul\",\n    \"last\" : \"Lungu\",\n    \"email\" : \"paul.lungu@camunda.com\",\n    \"phone\" : \"303-540-9000\",\n    \"street\" : \"1000 Maple Lane\",\n    \"city\" : \"Denver\",\n    \"state\" : \"CO\",\n    \"zip\" : \"80020\",\n    \"country\" : \"US\",\n    \"manager\" : \"Ragnar\"\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/contacts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"contacts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Contact search",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/contacts/search/findContactByEmail?email=paul.lungu@camunda.com",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"contacts",
						"search",
						"findContactByEmail"
					],
					"query": [
						{
							"key": "email",
							"value": "paul.lungu@camunda.com"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Orders",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/orders/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"orders",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch Orders",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\n    \"orderDate\": null,\n    \"orderKey\": \"77b406e6-5550-47a0-8de9-2f04c0fb1ddc\",\n    \"comment\": \"asdasdasdasdasdasdasd\",\n    \"started\": false,\n    \"approved\": false,\n    \"rejected\": false,\n    \"status\": null,\n    \"salesManager\": \"Ragnar\",\n    \"category\": \"250000\",\n    \"repName\": \"Paul Lungu\",\n    \"email\": \"paul.lungu@camunda.com\",\n    \"deliveryAddress\": \"1000 Maple Lane  Denver  CO  80020  US\"\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/pmOrders/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"pmOrders",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH Contact",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first\" : \"Paul\",\n    \"last\" : \"Lungu\",\n    \"email\" : \"paul.lungu@camunda.com\",\n    \"phone\" : \"303-540-9000\",\n    \"street\" : \"1000 Maple Lane\",\n    \"city\" : \"Denver\",\n    \"state\" : \"CO\",\n    \"zip\" : \"80020\",\n    \"country\" : \"US\",\n    \"manager\": \"Ragnar\"\n\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/contacts/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"contacts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Orders by Key",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/pmOrders/search/findOrderEntityByOrderKey?orderKey=07c38be9-e209-42da-bb63-82d4cb44a666",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"pmOrders",
						"search",
						"findOrderEntityByOrderKey"
					],
					"query": [
						{
							"key": "orderKey",
							"value": "07c38be9-e209-42da-bb63-82d4cb44a666"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "message-corrolation-web-form",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response must be valid and have a body\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"messageName\" : \"start-pm-order-approval\",\n  \"businessKey\" : \"{{$guid}}\",\n  \"processVariables\": {\n    \"approved\": {\n        \"value\":true\n    },\n    \"userStatusChanged\": {\n        \"value\":true\n    },\n    \"isbadAddress\": {\n        \"value\":false\n    }\n    ,\"isServiceDown\": {\n        \"value\":true\n    },\n    \"contact\": \n\t\t{\n\t\t\t\"value\": \"{\\\"name\\\": \\\"Paul\\\", \\\"email\\\": \\\"Paul.Lungu@camunda.com\\\"}\",\n\t\t\t\"type\": \"Object\",\n\t\t\t\"valueInfo\": \n\t\t\t{\n\t\t\t\t\"objectTypeName\": \"com.camunda.poc.starter.entity.Contact\",\n\t\t\t\t\"serializationDataFormat\": \"application/json\"\n\t\t\t}\n\t    }\n  }\n}"
				},
				"url": {
					"raw": "http://localhost:8080/engine-rest/message",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"engine-rest",
						"message"
					]
				},
				"description": "Starts a process instance with the rest API"
			},
			"response": []
		}
	]
}